{
  "api/HashBrowns.CryptoManager.html": {
    "href": "api/HashBrowns.CryptoManager.html",
    "title": "Class CryptoManager | HashBrowns API Reference",
    "keywords": "Class CryptoManager Namespace HashBrowns Assembly HashBrowns.dll Crypto manager public class CryptoManager Inheritance object CryptoManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CryptoManager(IEnumerable<IHash>, IEnumerable<ISymmetric>) Initializes a new instance of the CryptoManager class. public CryptoManager(IEnumerable<IHash> hashes, IEnumerable<ISymmetric> symmetrics) Parameters hashes IEnumerable<IHash> The hashes. symmetrics IEnumerable<ISymmetric> The symmetrics. Properties Hashes Gets the hashes. public IEnumerable<IHash> Hashes { get; } Property Value IEnumerable<IHash> The hashes. Symmetrics Gets the symmetrics. public IEnumerable<ISymmetric> Symmetrics { get; } Property Value IEnumerable<ISymmetric> The symmetrics. Methods CreateKey(byte[], byte[], HashingAlgorithms, int) Creates a PasswordDeriveBytes key. public static PasswordDeriveBytes CreateKey(byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations) Parameters key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. Returns PasswordDeriveBytes The resulting key. CreateRandomInitialVector(SymmetricAlgorithms) Creates the initial vector. public byte[] CreateRandomInitialVector(SymmetricAlgorithms algorithm) Parameters algorithm SymmetricAlgorithms The algorithm. Returns byte[] The initial vector. CreateRandomKey(SymmetricAlgorithms) Creates a key. public byte[] CreateRandomKey(SymmetricAlgorithms algorithm) Parameters algorithm SymmetricAlgorithms The algorithm. Returns byte[] The key Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Decrypts the specified data. public byte[] Decrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) algorithm SymmetricAlgorithms Crypto manager Returns byte[] The decrypted data. Decrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Decrypts the specified data. public byte[] Decrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) algorithm SymmetricAlgorithms The algorithm. Returns byte[] The decrypted data. Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Encrypts the specified data. public byte[] Encrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) algorithm SymmetricAlgorithms Crypto manager Returns byte[] The encrypted data. Encrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Encrypts the specified data. public byte[] Encrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) algorithm SymmetricAlgorithms The algorithm. Returns byte[] The encrypted data. Hash(byte[], HashingAlgorithms) Hashes the specified data. public byte[] Hash(byte[] data, HashingAlgorithms algorithm) Parameters data byte[] The data. algorithm HashingAlgorithms The algorithm to use. Returns byte[] The hash of the data."
  },
  "api/HashBrowns.ExtensionMethods.html": {
    "href": "api/HashBrowns.ExtensionMethods.html",
    "title": "Class ExtensionMethods | HashBrowns API Reference",
    "keywords": "Class ExtensionMethods Namespace HashBrowns Assembly HashBrowns.dll Extension methods. public static class ExtensionMethods Inheritance object ExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Decrypts the specified data. public static byte[] Decrypt(this byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms Extension methods. Returns byte[] The decrypted data. Decrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Decrypts the specified data. public static byte[] Decrypt(this byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms The algorithm. Returns byte[] The decrypted data. Decrypt(string, byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms, Encoding?) Decrypts the specified data. public static byte[] Decrypt(this string data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters data string The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms The algorithm. encoding Encoding The encoding of the string (defaults to UTF8). Returns byte[] The decrypted data. Decrypt(string, PasswordDeriveBytes, byte[], int, SymmetricAlgorithms, Encoding?) Decrypts the specified data. public static byte[] Decrypt(this string data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters data string The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms The algorithm. encoding Encoding The encoding. Returns byte[] The decrypted data. Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Encrypts the specified data. public static byte[] Encrypt(this byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms Extension methods. Returns byte[] The encrypted data. Encrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Encrypts the specified data. public static byte[] Encrypt(this byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms The algorithm. Returns byte[] The encrypted data. Encrypt(string, byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms, Encoding?) Encrypts the specified data. public static byte[] Encrypt(this string data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters data string The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms The algorithm. encoding Encoding The encoding of the string (defaults to UTF8). Returns byte[] The encrypted data. Encrypt(string, PasswordDeriveBytes, byte[], int, SymmetricAlgorithms, Encoding?) Encrypts the specified data. public static byte[] Encrypt(this string data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters data string The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector with a length of 16 bytes. keySize int Size of the key. (64, 128, 192, 256, etc.) algorithm SymmetricAlgorithms The algorithm. encoding Encoding The encoding of the string (defaults to UTF8). Returns byte[] The encrypted data. Hash(byte[], HashingAlgorithms) Hashes the specified data. public static byte[] Hash(this byte[] data, HashingAlgorithms algorithm) Parameters data byte[] The data. algorithm HashingAlgorithms The algorithm. Returns byte[] The hashed result. Hash(string, HashingAlgorithms, Encoding?) Hashes the specified algorithm. public static byte[] Hash(this string data, HashingAlgorithms algorithm, Encoding? encoding = null) Parameters data string The data. algorithm HashingAlgorithms The algorithm. encoding Encoding The encoding of the text (defaults to UTF8). Returns byte[] The hashed result."
  },
  "api/HashBrowns.Hashing.BaseClasses.HashBaseClass.html": {
    "href": "api/HashBrowns.Hashing.BaseClasses.HashBaseClass.html",
    "title": "Class HashBaseClass | HashBrowns API Reference",
    "keywords": "Class HashBaseClass Namespace HashBrowns.Hashing.BaseClasses Assembly HashBrowns.dll Hash base class public abstract class HashBaseClass : IHash Inheritance object HashBaseClass Implements IHash Derived HMACMD5Hasher HMACSHA1Hasher HMACSHA256Hasher HMACSHA384Hasher HMACSHA512Hasher MD5 SHA1 SHA256 SHA384 SHA512 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public abstract string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected abstract HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use Hash(byte[]) Hashes the specified data. public byte[] Hash(byte[] data) Parameters data byte[] The data. Returns byte[] The hash of the data. See Also IHash"
  },
  "api/HashBrowns.Hashing.BaseClasses.html": {
    "href": "api/HashBrowns.Hashing.BaseClasses.html",
    "title": "Namespace HashBrowns.Hashing.BaseClasses | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing.BaseClasses Classes HashBaseClass Hash base class"
  },
  "api/HashBrowns.Hashing.Enums.HashingAlgorithms.html": {
    "href": "api/HashBrowns.Hashing.Enums.HashingAlgorithms.html",
    "title": "Class HashingAlgorithms | HashBrowns API Reference",
    "keywords": "Class HashingAlgorithms Namespace HashBrowns.Hashing.Enums Assembly HashBrowns.dll Hashing algorithms. public class HashingAlgorithms : StringEnumBaseClass<HashingAlgorithms> Inheritance object StringEnumBaseClass<HashingAlgorithms> HashingAlgorithms Inherited Members StringEnumBaseClass<HashingAlgorithms>.ToStringEnumBaseClass(string) StringEnumBaseClass<HashingAlgorithms>.ToString() StringEnumBaseClass<HashingAlgorithms>.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HashingAlgorithms() Initializes a new instance of the HashingAlgorithms class. public HashingAlgorithms() HashingAlgorithms(string) Initializes a new instance of the HashingAlgorithms class. public HashingAlgorithms(string name) Parameters name string The name. Fields HMACMD5 The hmacmd5 public static HashingAlgorithms HMACMD5 Field Value HashingAlgorithms Hashing algorithms. HMACSHA1 The hmacsha1 public static HashingAlgorithms HMACSHA1 Field Value HashingAlgorithms Hashing algorithms. HMACSHA256 The hmacsha256 public static HashingAlgorithms HMACSHA256 Field Value HashingAlgorithms Hashing algorithms. HMACSHA384 The hmacsha384 public static HashingAlgorithms HMACSHA384 Field Value HashingAlgorithms Hashing algorithms. HMACSHA512 The hmacsha512 public static HashingAlgorithms HMACSHA512 Field Value HashingAlgorithms Hashing algorithms. MD5 The MD5 public static HashingAlgorithms MD5 Field Value HashingAlgorithms Hashing algorithms. SHA1 Gets the sha1. public static HashingAlgorithms SHA1 Field Value HashingAlgorithms Hashing algorithms. SHA256 The sha256 public static HashingAlgorithms SHA256 Field Value HashingAlgorithms Hashing algorithms. SHA384 The sha384 public static HashingAlgorithms SHA384 Field Value HashingAlgorithms Hashing algorithms. SHA512 The sha512 public static HashingAlgorithms SHA512 Field Value HashingAlgorithms Hashing algorithms. See Also StringEnumBaseClass<TClass>"
  },
  "api/HashBrowns.Hashing.Enums.html": {
    "href": "api/HashBrowns.Hashing.Enums.html",
    "title": "Namespace HashBrowns.Hashing.Enums | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing.Enums Classes HashingAlgorithms Hashing algorithms."
  },
  "api/HashBrowns.Hashing.HMACMD5Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACMD5Hasher.html",
    "title": "Class HMACMD5Hasher | HashBrowns API Reference",
    "keywords": "Class HMACMD5Hasher Namespace HashBrowns.Hashing Assembly HashBrowns.dll HMACHMACMD5 public class HMACMD5Hasher : HashBaseClass, IHash Inheritance object HashBaseClass HMACMD5Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA1Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA1Hasher.html",
    "title": "Class HMACSHA1Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA1Hasher Namespace HashBrowns.Hashing Assembly HashBrowns.dll HMACHMACSHA1 public class HMACSHA1Hasher : HashBaseClass, IHash Inheritance object HashBaseClass HMACSHA1Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA256Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA256Hasher.html",
    "title": "Class HMACSHA256Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA256Hasher Namespace HashBrowns.Hashing Assembly HashBrowns.dll HMACHMACSHA256 public class HMACSHA256Hasher : HashBaseClass, IHash Inheritance object HashBaseClass HMACSHA256Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA384Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA384Hasher.html",
    "title": "Class HMACSHA384Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA384Hasher Namespace HashBrowns.Hashing Assembly HashBrowns.dll HMACHMACSHA384 public class HMACSHA384Hasher : HashBaseClass, IHash Inheritance object HashBaseClass HMACSHA384Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA512Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA512Hasher.html",
    "title": "Class HMACSHA512Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA512Hasher Namespace HashBrowns.Hashing Assembly HashBrowns.dll HMACHMACSHA512 public class HMACSHA512Hasher : HashBaseClass, IHash Inheritance object HashBaseClass HMACSHA512Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.Interfaces.IHash.html": {
    "href": "api/HashBrowns.Hashing.Interfaces.IHash.html",
    "title": "Interface IHash | HashBrowns API Reference",
    "keywords": "Interface IHash Namespace HashBrowns.Hashing.Interfaces Assembly HashBrowns.dll Hash interface public interface IHash Properties Name Gets or sets the name. string Name { get; } Property Value string The name. Methods Hash(byte[]) Hashes the specified data. byte[] Hash(byte[] data) Parameters data byte[] The data. Returns byte[] The hash of the data."
  },
  "api/HashBrowns.Hashing.Interfaces.html": {
    "href": "api/HashBrowns.Hashing.Interfaces.html",
    "title": "Namespace HashBrowns.Hashing.Interfaces | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing.Interfaces Interfaces IHash Hash interface"
  },
  "api/HashBrowns.Hashing.MD5.html": {
    "href": "api/HashBrowns.Hashing.MD5.html",
    "title": "Class MD5 | HashBrowns API Reference",
    "keywords": "Class MD5 Namespace HashBrowns.Hashing Assembly HashBrowns.dll MD5 public class MD5 : HashBaseClass, IHash Inheritance object HashBaseClass MD5 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA1.html": {
    "href": "api/HashBrowns.Hashing.SHA1.html",
    "title": "Class SHA1 | HashBrowns API Reference",
    "keywords": "Class SHA1 Namespace HashBrowns.Hashing Assembly HashBrowns.dll SHA1 public class SHA1 : HashBaseClass, IHash Inheritance object HashBaseClass SHA1 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA256.html": {
    "href": "api/HashBrowns.Hashing.SHA256.html",
    "title": "Class SHA256 | HashBrowns API Reference",
    "keywords": "Class SHA256 Namespace HashBrowns.Hashing Assembly HashBrowns.dll SHA256 public class SHA256 : HashBaseClass, IHash Inheritance object HashBaseClass SHA256 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA384.html": {
    "href": "api/HashBrowns.Hashing.SHA384.html",
    "title": "Class SHA384 | HashBrowns API Reference",
    "keywords": "Class SHA384 Namespace HashBrowns.Hashing Assembly HashBrowns.dll SHA384 public class SHA384 : HashBaseClass, IHash Inheritance object HashBaseClass SHA384 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA512.html": {
    "href": "api/HashBrowns.Hashing.SHA512.html",
    "title": "Class SHA512 | HashBrowns API Reference",
    "keywords": "Class SHA512 Namespace HashBrowns.Hashing Assembly HashBrowns.dll SHA512 public class SHA512 : HashBaseClass, IHash Inheritance object HashBaseClass SHA512 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the hash algorithm. protected override HashAlgorithm GetAlgorithm() Returns HashAlgorithm The hash algorithm to use See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.html": {
    "href": "api/HashBrowns.Hashing.html",
    "title": "Namespace HashBrowns.Hashing | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing Classes HMACMD5Hasher HMACHMACMD5 HMACSHA1Hasher HMACHMACSHA1 HMACSHA256Hasher HMACHMACSHA256 HMACSHA384Hasher HMACHMACSHA384 HMACSHA512Hasher HMACHMACSHA512 MD5 MD5 SHA1 SHA1 SHA256 SHA256 SHA384 SHA384 SHA512 SHA512"
  },
  "api/HashBrowns.Modules.HashBrownsModule.html": {
    "href": "api/HashBrowns.Modules.HashBrownsModule.html",
    "title": "Class HashBrownsModule | HashBrowns API Reference",
    "keywords": "Class HashBrownsModule Namespace HashBrowns.Modules Assembly HashBrowns.dll Registration module public class HashBrownsModule : IModule Inheritance object HashBrownsModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run this in public int Order { get; } Property Value int Registration module Methods Load(IServiceCollection?) Loads the module using the bootstrapper public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper. See Also IModule"
  },
  "api/HashBrowns.Modules.html": {
    "href": "api/HashBrowns.Modules.html",
    "title": "Namespace HashBrowns.Modules | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Modules Classes HashBrownsModule Registration module"
  },
  "api/HashBrowns.Symmetric.Aes.html": {
    "href": "api/HashBrowns.Symmetric.Aes.html",
    "title": "Class Aes | HashBrowns API Reference",
    "keywords": "Class Aes Namespace HashBrowns.Symmetric Assembly HashBrowns.dll AES algorithm public class Aes : SymmetricBaseClass, ISymmetric Inheritance object SymmetricBaseClass Aes Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the algorithm. protected override SymmetricAlgorithm GetAlgorithm() Returns SymmetricAlgorithm The algorithm to use. See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.BaseClasses.SymmetricBaseClass.html": {
    "href": "api/HashBrowns.Symmetric.BaseClasses.SymmetricBaseClass.html",
    "title": "Class SymmetricBaseClass | HashBrowns API Reference",
    "keywords": "Class SymmetricBaseClass Namespace HashBrowns.Symmetric.BaseClasses Assembly HashBrowns.dll Symmetric base class public abstract class SymmetricBaseClass : ISymmetric Inheritance object SymmetricBaseClass Implements ISymmetric Derived Aes DES RC2 Rijndael TripleDES Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SymmetricBaseClass() Initializes a new instance of the SymmetricBaseClass class. protected SymmetricBaseClass() Properties Name Gets the name. public abstract string Name { get; } Property Value string The name. Methods CreateInitialVector() Creates the initial vector. public byte[] CreateInitialVector() Returns byte[] The initial vector. CreateKey() Creates the key. public byte[] CreateKey() Returns byte[] The key. Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Decrypts the specified data. public byte[] Decrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The decrypted data. Decrypt(byte[], PasswordDeriveBytes, byte[], int) Decrypts the specified data. public byte[] Decrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] Symmetric base class keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The decrypted data. Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Encrypts the specified data. public byte[] Encrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The encrypted data. Encrypt(byte[], PasswordDeriveBytes, byte[], int) Encrypts the specified data. public byte[] Encrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The encrypted data. GetAlgorithm() Gets the algorithm. protected abstract SymmetricAlgorithm GetAlgorithm() Returns SymmetricAlgorithm The algorithm to use. See Also ISymmetric"
  },
  "api/HashBrowns.Symmetric.BaseClasses.html": {
    "href": "api/HashBrowns.Symmetric.BaseClasses.html",
    "title": "Namespace HashBrowns.Symmetric.BaseClasses | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric.BaseClasses Classes SymmetricBaseClass Symmetric base class"
  },
  "api/HashBrowns.Symmetric.DES.html": {
    "href": "api/HashBrowns.Symmetric.DES.html",
    "title": "Class DES | HashBrowns API Reference",
    "keywords": "Class DES Namespace HashBrowns.Symmetric Assembly HashBrowns.dll DES public class DES : SymmetricBaseClass, ISymmetric Inheritance object SymmetricBaseClass DES Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the algorithm. protected override SymmetricAlgorithm GetAlgorithm() Returns SymmetricAlgorithm The algorithm to use. See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.Enums.SymmetricAlgorithms.html": {
    "href": "api/HashBrowns.Symmetric.Enums.SymmetricAlgorithms.html",
    "title": "Class SymmetricAlgorithms | HashBrowns API Reference",
    "keywords": "Class SymmetricAlgorithms Namespace HashBrowns.Symmetric.Enums Assembly HashBrowns.dll Symmetric algorithms public class SymmetricAlgorithms : StringEnumBaseClass<SymmetricAlgorithms> Inheritance object StringEnumBaseClass<SymmetricAlgorithms> SymmetricAlgorithms Inherited Members StringEnumBaseClass<SymmetricAlgorithms>.ToStringEnumBaseClass(string) StringEnumBaseClass<SymmetricAlgorithms>.ToString() StringEnumBaseClass<SymmetricAlgorithms>.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SymmetricAlgorithms() Initializes a new instance of the SymmetricAlgorithms class. public SymmetricAlgorithms() SymmetricAlgorithms(string) Initializes a new instance of the SymmetricAlgorithms class. public SymmetricAlgorithms(string name) Parameters name string The name. Fields AES The aes public static SymmetricAlgorithms AES Field Value SymmetricAlgorithms Symmetric algorithms DES The DES public static SymmetricAlgorithms DES Field Value SymmetricAlgorithms Symmetric algorithms RC2 The rc2 public static SymmetricAlgorithms RC2 Field Value SymmetricAlgorithms Symmetric algorithms Rijndael The rijndael public static SymmetricAlgorithms Rijndael Field Value SymmetricAlgorithms Symmetric algorithms TripleDES The triple DES public static SymmetricAlgorithms TripleDES Field Value SymmetricAlgorithms Symmetric algorithms See Also StringEnumBaseClass<TClass>"
  },
  "api/HashBrowns.Symmetric.Enums.html": {
    "href": "api/HashBrowns.Symmetric.Enums.html",
    "title": "Namespace HashBrowns.Symmetric.Enums | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric.Enums Classes SymmetricAlgorithms Symmetric algorithms"
  },
  "api/HashBrowns.Symmetric.Interfaces.ISymmetric.html": {
    "href": "api/HashBrowns.Symmetric.Interfaces.ISymmetric.html",
    "title": "Interface ISymmetric | HashBrowns API Reference",
    "keywords": "Interface ISymmetric Namespace HashBrowns.Symmetric.Interfaces Assembly HashBrowns.dll Symmetric interface public interface ISymmetric Properties Name Gets the name. string Name { get; } Property Value string The name. Methods CreateInitialVector() Creates the initial vector. byte[] CreateInitialVector() Returns byte[] The initial vector. CreateKey() Creates the key. byte[] CreateKey() Returns byte[] The key. Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Decrypts the specified data. byte[] Decrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The decrypted data. Decrypt(byte[], PasswordDeriveBytes, byte[], int) Decrypts the specified data. byte[] Decrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] Symmetric interface keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The decrypted data. Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Encrypts the specified data. byte[] Encrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters data byte[] The data. key byte[] The key. salt byte[] The salt. hashingAlgorithm HashingAlgorithms The hashing algorithm. passwordIterations int The password iterations. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The encrypted data. Encrypt(byte[], PasswordDeriveBytes, byte[], int) Encrypts the specified data. byte[] Encrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters data byte[] The data. key PasswordDeriveBytes The key. initialVector byte[] The initial vector. 16 ASCII characters long. keySize int Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns byte[] The encrypted data."
  },
  "api/HashBrowns.Symmetric.Interfaces.html": {
    "href": "api/HashBrowns.Symmetric.Interfaces.html",
    "title": "Namespace HashBrowns.Symmetric.Interfaces | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric.Interfaces Interfaces ISymmetric Symmetric interface"
  },
  "api/HashBrowns.Symmetric.RC2.html": {
    "href": "api/HashBrowns.Symmetric.RC2.html",
    "title": "Class RC2 | HashBrowns API Reference",
    "keywords": "Class RC2 Namespace HashBrowns.Symmetric Assembly HashBrowns.dll RC2 public class RC2 : SymmetricBaseClass, ISymmetric Inheritance object SymmetricBaseClass RC2 Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the algorithm. protected override SymmetricAlgorithm GetAlgorithm() Returns SymmetricAlgorithm The algorithm to use. See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.Rijndael.html": {
    "href": "api/HashBrowns.Symmetric.Rijndael.html",
    "title": "Class Rijndael | HashBrowns API Reference",
    "keywords": "Class Rijndael Namespace HashBrowns.Symmetric Assembly HashBrowns.dll Rijndael public class Rijndael : SymmetricBaseClass, ISymmetric Inheritance object SymmetricBaseClass Rijndael Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the algorithm. protected override SymmetricAlgorithm GetAlgorithm() Returns SymmetricAlgorithm The algorithm to use. See Also ISymmetric"
  },
  "api/HashBrowns.Symmetric.TripleDES.html": {
    "href": "api/HashBrowns.Symmetric.TripleDES.html",
    "title": "Class TripleDES | HashBrowns API Reference",
    "keywords": "Class TripleDES Namespace HashBrowns.Symmetric Assembly HashBrowns.dll TripleDES public class TripleDES : SymmetricBaseClass, ISymmetric Inheritance object SymmetricBaseClass TripleDES Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name. public override string Name { get; } Property Value string The name. Methods GetAlgorithm() Gets the algorithm. protected override SymmetricAlgorithm GetAlgorithm() Returns SymmetricAlgorithm The algorithm to use. See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.html": {
    "href": "api/HashBrowns.Symmetric.html",
    "title": "Namespace HashBrowns.Symmetric | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric Classes Aes AES algorithm DES DES RC2 RC2 Rijndael Rijndael TripleDES TripleDES"
  },
  "api/HashBrowns.html": {
    "href": "api/HashBrowns.html",
    "title": "Namespace HashBrowns | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns Classes CryptoManager Crypto manager ExtensionMethods Extension methods."
  },
  "api/Microsoft.Extensions.DependencyInjection.HashRegistration.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.HashRegistration.html",
    "title": "Class HashRegistration | HashBrowns API Reference",
    "keywords": "Class HashRegistration Namespace Microsoft.Extensions.DependencyInjection Assembly HashBrowns.dll Registration extension methods public static class HashRegistration Inheritance object HashRegistration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterHashBrowns(ICanisterConfiguration?) Registers the library with the bootstrapper. public static ICanisterConfiguration? RegisterHashBrowns(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | HashBrowns API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes HashRegistration Registration extension methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | HashBrowns API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | HashBrowns API Reference",
    "keywords": "Code using BigBook; using HashBrowns.Hashing.Enums; using HashBrowns.Symmetric.Enums; using Microsoft.Extensions.DependencyInjection; using System.Text; namespace HashBrowns.Example { /// <summary> /// This is just an example of how to use HashBrowns to hash and encrypt strings. /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Setup the DI var Services = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Hash the string using SHA256 Console.WriteLine(\"Let's hash some strings!\".Hash(HashingAlgorithms.SHA256).ToString(Encoding.UTF8)); // Hash the string using HMACSHA512 Console.WriteLine(\"Let's hash some strings!\".Hash(HashingAlgorithms.HMACSHA512).ToString(Encoding.UTF8)); // Encrypt the string using a password and salt var EncryptedString = \"Let's encrypt some strings!\".Encrypt(\"password\".ToByteArray(), \"salt\".ToByteArray(), HashingAlgorithms.SHA256, 5, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }, 256, SymmetricAlgorithms.AES); Console.WriteLine(EncryptedString.ToString(Encoding.UTF8)); // Decrypt the string using a password and salt var DecryptedString = EncryptedString.Decrypt(\"password\".ToByteArray(), \"salt\".ToByteArray(), HashingAlgorithms.SHA256, 5, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }, 256, SymmetricAlgorithms.AES); Console.WriteLine(DecryptedString.ToString(Encoding.UTF8)); } } } Output ??u??3/A6‼yH??S$e[???W? [0→?◄ ?U??v0???↕??:????♂??↑??c?☻!?RJ??4??♥ w?f>(?-◄?l⌂♀(?0{t3??t??? b???{????????$??539???6v∟↕N# Let's encrypt some strings!"
  },
  "index.html": {
    "href": "index.html",
    "title": "HashBrowns | HashBrowns API Reference",
    "keywords": "HashBrowns HashBrowns is a library to help simplify encryption within .Net. Basic Usage To use the library you first need to set up things on the ServiceCollection. Thankfully this only takes one call to do: serviceCollection.AddCanisterModules(); This is required prior to using the CryptoManager or extension methods class for the first time. Once Canister is set up, you can use the CryptoManager class: var Instance = Canister.Builder.Bootstrapper.Resolve<CryptoManager>().Encrypt(...); However instead of having the IoC container create the class, you can also use the extension methods found in the HashBrowns namespace: var EncryptedData = \"My string that I want to encrypt\".Encrypt(Key, Salt, HashingAlgorithm, NumberIterations, InitialVector, KeySize, EncryptionAlgorithm); Similarly you can decrypt: var DecryptedData = EncryptedData.Decrypt(Key, Salt, HashingAlgorithm, NumberIterations, InitialVector, KeySize, EncryptionAlgorithm); Also hashing is available: var MyHashedValue = \"Example data\".Hash(HashingAlgorithm); Installation The library is available via Nuget with the package name \"HashBrowns\". To install it run the following command in the Package Manager Console: Install-Package HashBrowns"
  }
}