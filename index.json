{
  "api/HashBrowns.CryptoManager.html": {
    "href": "api/HashBrowns.CryptoManager.html",
    "title": "Class CryptoManager | HashBrowns API Reference",
    "keywords": "Class CryptoManager Crypto manager Inheritance object CryptoManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns Assembly: HashBrowns.dll Syntax public class CryptoManager Constructors | Edit this page View Source CryptoManager(IEnumerable<IHash>, IEnumerable<ISymmetric>) Initializes a new instance of the CryptoManager class. Declaration public CryptoManager(IEnumerable<IHash> hashes, IEnumerable<ISymmetric> symmetrics) Parameters Type Name Description IEnumerable<IHash> hashes The hashes. IEnumerable<ISymmetric> symmetrics The symmetrics. Properties | Edit this page View Source Hashes Gets the hashes. Declaration public IEnumerable<IHash> Hashes { get; } Property Value Type Description IEnumerable<IHash> The hashes. | Edit this page View Source Symmetrics Gets the symmetrics. Declaration public IEnumerable<ISymmetric> Symmetrics { get; } Property Value Type Description IEnumerable<ISymmetric> The symmetrics. Methods | Edit this page View Source CreateKey(byte[], byte[], HashingAlgorithms, int) Creates a PasswordDeriveBytes key. Declaration public static PasswordDeriveBytes CreateKey(byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations) Parameters Type Name Description byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. Returns Type Description PasswordDeriveBytes The resulting key. | Edit this page View Source CreateRandomInitialVector(SymmetricAlgorithms) Creates the initial vector. Declaration public byte[] CreateRandomInitialVector(SymmetricAlgorithms algorithm) Parameters Type Name Description SymmetricAlgorithms algorithm The algorithm. Returns Type Description byte[] The initial vector. | Edit this page View Source CreateRandomKey(SymmetricAlgorithms) Creates a key. Declaration public byte[] CreateRandomKey(SymmetricAlgorithms algorithm) Parameters Type Name Description SymmetricAlgorithms algorithm The algorithm. Returns Type Description byte[] The key | Edit this page View Source Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Decrypts the specified data. Declaration public byte[] Decrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) SymmetricAlgorithms algorithm Returns Type Description byte[] The decrypted data. | Edit this page View Source Decrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Decrypts the specified data. Declaration public byte[] Decrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) SymmetricAlgorithms algorithm The algorithm. Returns Type Description byte[] The decrypted data. | Edit this page View Source Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Encrypts the specified data. Declaration public byte[] Encrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) SymmetricAlgorithms algorithm Returns Type Description byte[] The encrypted data. | Edit this page View Source Encrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Encrypts the specified data. Declaration public byte[] Encrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) SymmetricAlgorithms algorithm The algorithm. Returns Type Description byte[] The encrypted data. | Edit this page View Source Hash(byte[], HashingAlgorithms) Hashes the specified data. Declaration public byte[] Hash(byte[] data, HashingAlgorithms algorithm) Parameters Type Name Description byte[] data The data. HashingAlgorithms algorithm The algorithm to use. Returns Type Description byte[] The hash of the data."
  },
  "api/HashBrowns.ExtensionMethods.html": {
    "href": "api/HashBrowns.ExtensionMethods.html",
    "title": "Class ExtensionMethods | HashBrowns API Reference",
    "keywords": "Class ExtensionMethods Extension methods. Inheritance object ExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns Assembly: HashBrowns.dll Syntax public static class ExtensionMethods Methods | Edit this page View Source Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Decrypts the specified data. Declaration public static byte[] Decrypt(this byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm Returns Type Description byte[] The decrypted data. | Edit this page View Source Decrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Decrypts the specified data. Declaration public static byte[] Decrypt(this byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm The algorithm. Returns Type Description byte[] The decrypted data. | Edit this page View Source Decrypt(string, byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms, Encoding?) Decrypts the specified data. Declaration public static byte[] Decrypt(this string data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters Type Name Description string data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm The algorithm. Encoding encoding The encoding of the string (defaults to UTF8). Returns Type Description byte[] The decrypted data. | Edit this page View Source Decrypt(string, PasswordDeriveBytes, byte[], int, SymmetricAlgorithms, Encoding?) Decrypts the specified data. Declaration public static byte[] Decrypt(this string data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters Type Name Description string data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm The algorithm. Encoding encoding The encoding. Returns Type Description byte[] The decrypted data. | Edit this page View Source Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms) Encrypts the specified data. Declaration public static byte[] Encrypt(this byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm Returns Type Description byte[] The encrypted data. | Edit this page View Source Encrypt(byte[], PasswordDeriveBytes, byte[], int, SymmetricAlgorithms) Encrypts the specified data. Declaration public static byte[] Encrypt(this byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm The algorithm. Returns Type Description byte[] The encrypted data. | Edit this page View Source Encrypt(string, byte[], byte[], HashingAlgorithms, int, byte[], int, SymmetricAlgorithms, Encoding?) Encrypts the specified data. Declaration public static byte[] Encrypt(this string data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters Type Name Description string data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm The algorithm. Encoding encoding The encoding of the string (defaults to UTF8). Returns Type Description byte[] The encrypted data. | Edit this page View Source Encrypt(string, PasswordDeriveBytes, byte[], int, SymmetricAlgorithms, Encoding?) Encrypts the specified data. Declaration public static byte[] Encrypt(this string data, PasswordDeriveBytes key, byte[] initialVector, int keySize, SymmetricAlgorithms algorithm, Encoding? encoding = null) Parameters Type Name Description string data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector with a length of 16 bytes. int keySize Size of the key. (64, 128, 192, 256, etc.) SymmetricAlgorithms algorithm The algorithm. Encoding encoding The encoding of the string (defaults to UTF8). Returns Type Description byte[] The encrypted data. | Edit this page View Source Hash(byte[], HashingAlgorithms) Hashes the specified data. Declaration public static byte[] Hash(this byte[] data, HashingAlgorithms algorithm) Parameters Type Name Description byte[] data The data. HashingAlgorithms algorithm The algorithm. Returns Type Description byte[] The hashed result. | Edit this page View Source Hash(string, HashingAlgorithms, Encoding?) Hashes the specified algorithm. Declaration public static byte[] Hash(this string data, HashingAlgorithms algorithm, Encoding? encoding = null) Parameters Type Name Description string data The data. HashingAlgorithms algorithm The algorithm. Encoding encoding The encoding of the text (defaults to UTF8). Returns Type Description byte[] The hashed result."
  },
  "api/HashBrowns.Hashing.BaseClasses.HashBaseClass.html": {
    "href": "api/HashBrowns.Hashing.BaseClasses.HashBaseClass.html",
    "title": "Class HashBaseClass | HashBrowns API Reference",
    "keywords": "Class HashBaseClass Hash base class Inheritance object HashBaseClass HMACMD5Hasher HMACSHA1Hasher HMACSHA256Hasher HMACSHA384Hasher HMACSHA512Hasher MD5 SHA1 SHA256 SHA384 SHA512 Implements IHash Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing.BaseClasses Assembly: HashBrowns.dll Syntax public abstract class HashBaseClass : IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public abstract string Name { get; } Property Value Type Description string The name. See Also IHash Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected abstract HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use See Also IHash | Edit this page View Source Hash(byte[]) Hashes the specified data. Declaration public byte[] Hash(byte[] data) Parameters Type Name Description byte[] data The data. Returns Type Description byte[] The hash of the data. See Also IHash Implements IHash See Also IHash"
  },
  "api/HashBrowns.Hashing.BaseClasses.html": {
    "href": "api/HashBrowns.Hashing.BaseClasses.html",
    "title": "Namespace HashBrowns.Hashing.BaseClasses | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing.BaseClasses Classes HashBaseClass Hash base class"
  },
  "api/HashBrowns.Hashing.Enums.HashingAlgorithms.html": {
    "href": "api/HashBrowns.Hashing.Enums.HashingAlgorithms.html",
    "title": "Class HashingAlgorithms | HashBrowns API Reference",
    "keywords": "Class HashingAlgorithms Hashing algorithms. Inheritance object StringEnumBaseClass<HashingAlgorithms> HashingAlgorithms Inherited Members StringEnumBaseClass<HashingAlgorithms>.ToStringEnumBaseClass(string) StringEnumBaseClass<HashingAlgorithms>.ToString() StringEnumBaseClass<HashingAlgorithms>.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: HashBrowns.Hashing.Enums Assembly: HashBrowns.dll Syntax public class HashingAlgorithms : StringEnumBaseClass<HashingAlgorithms> Constructors | Edit this page View Source HashingAlgorithms() Initializes a new instance of the HashingAlgorithms class. Declaration public HashingAlgorithms() See Also StringEnumBaseClass<TClass> | Edit this page View Source HashingAlgorithms(string) Initializes a new instance of the HashingAlgorithms class. Declaration public HashingAlgorithms(string name) Parameters Type Name Description string name The name. See Also StringEnumBaseClass<TClass> Fields | Edit this page View Source HMACMD5 The hmacmd5 Declaration public static HashingAlgorithms HMACMD5 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source HMACSHA1 The hmacsha1 Declaration public static HashingAlgorithms HMACSHA1 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source HMACSHA256 The hmacsha256 Declaration public static HashingAlgorithms HMACSHA256 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source HMACSHA384 The hmacsha384 Declaration public static HashingAlgorithms HMACSHA384 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source HMACSHA512 The hmacsha512 Declaration public static HashingAlgorithms HMACSHA512 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source MD5 The MD5 Declaration public static HashingAlgorithms MD5 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source SHA1 Gets the sha1. Declaration public static HashingAlgorithms SHA1 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source SHA256 The sha256 Declaration public static HashingAlgorithms SHA256 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source SHA384 The sha384 Declaration public static HashingAlgorithms SHA384 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source SHA512 The sha512 Declaration public static HashingAlgorithms SHA512 Field Value Type Description HashingAlgorithms See Also StringEnumBaseClass<TClass> See Also StringEnumBaseClass<TClass>"
  },
  "api/HashBrowns.Hashing.Enums.html": {
    "href": "api/HashBrowns.Hashing.Enums.html",
    "title": "Namespace HashBrowns.Hashing.Enums | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing.Enums Classes HashingAlgorithms Hashing algorithms."
  },
  "api/HashBrowns.Hashing.HMACMD5Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACMD5Hasher.html",
    "title": "Class HMACMD5Hasher | HashBrowns API Reference",
    "keywords": "Class HMACMD5Hasher HMACHMACMD5 Inheritance object HashBaseClass HMACMD5Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class HMACMD5Hasher : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA1Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA1Hasher.html",
    "title": "Class HMACSHA1Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA1Hasher HMACHMACSHA1 Inheritance object HashBaseClass HMACSHA1Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class HMACSHA1Hasher : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA256Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA256Hasher.html",
    "title": "Class HMACSHA256Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA256Hasher HMACHMACSHA256 Inheritance object HashBaseClass HMACSHA256Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class HMACSHA256Hasher : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA384Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA384Hasher.html",
    "title": "Class HMACSHA384Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA384Hasher HMACHMACSHA384 Inheritance object HashBaseClass HMACSHA384Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class HMACSHA384Hasher : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.HMACSHA512Hasher.html": {
    "href": "api/HashBrowns.Hashing.HMACSHA512Hasher.html",
    "title": "Class HMACSHA512Hasher | HashBrowns API Reference",
    "keywords": "Class HMACSHA512Hasher HMACHMACSHA512 Inheritance object HashBaseClass HMACSHA512Hasher Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class HMACSHA512Hasher : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.Interfaces.IHash.html": {
    "href": "api/HashBrowns.Hashing.Interfaces.IHash.html",
    "title": "Interface IHash | HashBrowns API Reference",
    "keywords": "Interface IHash Hash interface Namespace: HashBrowns.Hashing.Interfaces Assembly: HashBrowns.dll Syntax public interface IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration string Name { get; } Property Value Type Description string The name. Methods | Edit this page View Source Hash(byte[]) Hashes the specified data. Declaration byte[] Hash(byte[] data) Parameters Type Name Description byte[] data The data. Returns Type Description byte[] The hash of the data."
  },
  "api/HashBrowns.Hashing.Interfaces.html": {
    "href": "api/HashBrowns.Hashing.Interfaces.html",
    "title": "Namespace HashBrowns.Hashing.Interfaces | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing.Interfaces Interfaces IHash Hash interface"
  },
  "api/HashBrowns.Hashing.MD5.html": {
    "href": "api/HashBrowns.Hashing.MD5.html",
    "title": "Class MD5 | HashBrowns API Reference",
    "keywords": "Class MD5 MD5 Inheritance object HashBaseClass MD5 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class MD5 : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA1.html": {
    "href": "api/HashBrowns.Hashing.SHA1.html",
    "title": "Class SHA1 | HashBrowns API Reference",
    "keywords": "Class SHA1 SHA1 Inheritance object HashBaseClass SHA1 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class SHA1 : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA256.html": {
    "href": "api/HashBrowns.Hashing.SHA256.html",
    "title": "Class SHA256 | HashBrowns API Reference",
    "keywords": "Class SHA256 SHA256 Inheritance object HashBaseClass SHA256 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class SHA256 : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA384.html": {
    "href": "api/HashBrowns.Hashing.SHA384.html",
    "title": "Class SHA384 | HashBrowns API Reference",
    "keywords": "Class SHA384 SHA384 Inheritance object HashBaseClass SHA384 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class SHA384 : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.SHA512.html": {
    "href": "api/HashBrowns.Hashing.SHA512.html",
    "title": "Class SHA512 | HashBrowns API Reference",
    "keywords": "Class SHA512 SHA512 Inheritance object HashBaseClass SHA512 Implements IHash Inherited Members HashBaseClass.Hash(byte[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Hashing Assembly: HashBrowns.dll Syntax public class SHA512 : HashBaseClass, IHash Properties | Edit this page View Source Name Gets or sets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides HashBaseClass.Name See Also HashBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the hash algorithm. Declaration protected override HashAlgorithm GetAlgorithm() Returns Type Description HashAlgorithm The hash algorithm to use Overrides HashBaseClass.GetAlgorithm() See Also HashBaseClass Implements IHash See Also HashBaseClass"
  },
  "api/HashBrowns.Hashing.html": {
    "href": "api/HashBrowns.Hashing.html",
    "title": "Namespace HashBrowns.Hashing | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Hashing Classes HMACMD5Hasher HMACHMACMD5 HMACSHA1Hasher HMACHMACSHA1 HMACSHA256Hasher HMACHMACSHA256 HMACSHA384Hasher HMACHMACSHA384 HMACSHA512Hasher HMACHMACSHA512 MD5 MD5 SHA1 SHA1 SHA256 SHA256 SHA384 SHA384 SHA512 SHA512"
  },
  "api/HashBrowns.Modules.HashBrownsModule.html": {
    "href": "api/HashBrowns.Modules.HashBrownsModule.html",
    "title": "Class HashBrownsModule | HashBrowns API Reference",
    "keywords": "Class HashBrownsModule Registration module Inheritance object HashBrownsModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Modules Assembly: HashBrowns.dll Syntax public class HashBrownsModule : IModule Properties | Edit this page View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Edit this page View Source Load(IServiceCollection?) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule See Also IModule"
  },
  "api/HashBrowns.Modules.html": {
    "href": "api/HashBrowns.Modules.html",
    "title": "Namespace HashBrowns.Modules | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Modules Classes HashBrownsModule Registration module"
  },
  "api/HashBrowns.Symmetric.Aes.html": {
    "href": "api/HashBrowns.Symmetric.Aes.html",
    "title": "Class Aes | HashBrowns API Reference",
    "keywords": "Class Aes AES algorithm Inheritance object SymmetricBaseClass Aes Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Symmetric Assembly: HashBrowns.dll Syntax public class Aes : SymmetricBaseClass, ISymmetric Properties | Edit this page View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides SymmetricBaseClass.Name See Also SymmetricBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the algorithm. Declaration protected override SymmetricAlgorithm GetAlgorithm() Returns Type Description SymmetricAlgorithm The algorithm to use. Overrides SymmetricBaseClass.GetAlgorithm() See Also SymmetricBaseClass Implements ISymmetric See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.BaseClasses.SymmetricBaseClass.html": {
    "href": "api/HashBrowns.Symmetric.BaseClasses.SymmetricBaseClass.html",
    "title": "Class SymmetricBaseClass | HashBrowns API Reference",
    "keywords": "Class SymmetricBaseClass Symmetric base class Inheritance object SymmetricBaseClass Aes DES RC2 Rijndael TripleDES Implements ISymmetric Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Symmetric.BaseClasses Assembly: HashBrowns.dll Syntax public abstract class SymmetricBaseClass : ISymmetric Constructors | Edit this page View Source SymmetricBaseClass() Initializes a new instance of the SymmetricBaseClass class. Declaration protected SymmetricBaseClass() See Also ISymmetric Properties | Edit this page View Source Name Gets the name. Declaration public abstract string Name { get; } Property Value Type Description string The name. See Also ISymmetric Methods | Edit this page View Source CreateInitialVector() Creates the initial vector. Declaration public byte[] CreateInitialVector() Returns Type Description byte[] The initial vector. See Also ISymmetric | Edit this page View Source CreateKey() Creates the key. Declaration public byte[] CreateKey() Returns Type Description byte[] The key. See Also ISymmetric | Edit this page View Source Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Decrypts the specified data. Declaration public byte[] Decrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The decrypted data. See Also ISymmetric | Edit this page View Source Decrypt(byte[], PasswordDeriveBytes, byte[], int) Decrypts the specified data. Declaration public byte[] Decrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The decrypted data. See Also ISymmetric | Edit this page View Source Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Encrypts the specified data. Declaration public byte[] Encrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The encrypted data. See Also ISymmetric | Edit this page View Source Encrypt(byte[], PasswordDeriveBytes, byte[], int) Encrypts the specified data. Declaration public byte[] Encrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The encrypted data. See Also ISymmetric | Edit this page View Source GetAlgorithm() Gets the algorithm. Declaration protected abstract SymmetricAlgorithm GetAlgorithm() Returns Type Description SymmetricAlgorithm The algorithm to use. See Also ISymmetric Implements ISymmetric See Also ISymmetric"
  },
  "api/HashBrowns.Symmetric.BaseClasses.html": {
    "href": "api/HashBrowns.Symmetric.BaseClasses.html",
    "title": "Namespace HashBrowns.Symmetric.BaseClasses | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric.BaseClasses Classes SymmetricBaseClass Symmetric base class"
  },
  "api/HashBrowns.Symmetric.DES.html": {
    "href": "api/HashBrowns.Symmetric.DES.html",
    "title": "Class DES | HashBrowns API Reference",
    "keywords": "Class DES DES Inheritance object SymmetricBaseClass DES Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Symmetric Assembly: HashBrowns.dll Syntax public class DES : SymmetricBaseClass, ISymmetric Properties | Edit this page View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides SymmetricBaseClass.Name See Also SymmetricBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the algorithm. Declaration protected override SymmetricAlgorithm GetAlgorithm() Returns Type Description SymmetricAlgorithm The algorithm to use. Overrides SymmetricBaseClass.GetAlgorithm() See Also SymmetricBaseClass Implements ISymmetric See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.Enums.SymmetricAlgorithms.html": {
    "href": "api/HashBrowns.Symmetric.Enums.SymmetricAlgorithms.html",
    "title": "Class SymmetricAlgorithms | HashBrowns API Reference",
    "keywords": "Class SymmetricAlgorithms Symmetric algorithms Inheritance object StringEnumBaseClass<SymmetricAlgorithms> SymmetricAlgorithms Inherited Members StringEnumBaseClass<SymmetricAlgorithms>.ToStringEnumBaseClass(string) StringEnumBaseClass<SymmetricAlgorithms>.ToString() StringEnumBaseClass<SymmetricAlgorithms>.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: HashBrowns.Symmetric.Enums Assembly: HashBrowns.dll Syntax public class SymmetricAlgorithms : StringEnumBaseClass<SymmetricAlgorithms> Constructors | Edit this page View Source SymmetricAlgorithms() Initializes a new instance of the SymmetricAlgorithms class. Declaration public SymmetricAlgorithms() See Also StringEnumBaseClass<TClass> | Edit this page View Source SymmetricAlgorithms(string) Initializes a new instance of the SymmetricAlgorithms class. Declaration public SymmetricAlgorithms(string name) Parameters Type Name Description string name The name. See Also StringEnumBaseClass<TClass> Fields | Edit this page View Source AES The aes Declaration public static SymmetricAlgorithms AES Field Value Type Description SymmetricAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source DES The DES Declaration public static SymmetricAlgorithms DES Field Value Type Description SymmetricAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source RC2 The rc2 Declaration public static SymmetricAlgorithms RC2 Field Value Type Description SymmetricAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source Rijndael The rijndael Declaration public static SymmetricAlgorithms Rijndael Field Value Type Description SymmetricAlgorithms See Also StringEnumBaseClass<TClass> | Edit this page View Source TripleDES The triple DES Declaration public static SymmetricAlgorithms TripleDES Field Value Type Description SymmetricAlgorithms See Also StringEnumBaseClass<TClass> See Also StringEnumBaseClass<TClass>"
  },
  "api/HashBrowns.Symmetric.Enums.html": {
    "href": "api/HashBrowns.Symmetric.Enums.html",
    "title": "Namespace HashBrowns.Symmetric.Enums | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric.Enums Classes SymmetricAlgorithms Symmetric algorithms"
  },
  "api/HashBrowns.Symmetric.Interfaces.ISymmetric.html": {
    "href": "api/HashBrowns.Symmetric.Interfaces.ISymmetric.html",
    "title": "Interface ISymmetric | HashBrowns API Reference",
    "keywords": "Interface ISymmetric Symmetric interface Namespace: HashBrowns.Symmetric.Interfaces Assembly: HashBrowns.dll Syntax public interface ISymmetric Properties | Edit this page View Source Name Gets the name. Declaration string Name { get; } Property Value Type Description string The name. Methods | Edit this page View Source CreateInitialVector() Creates the initial vector. Declaration byte[] CreateInitialVector() Returns Type Description byte[] The initial vector. | Edit this page View Source CreateKey() Creates the key. Declaration byte[] CreateKey() Returns Type Description byte[] The key. | Edit this page View Source Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Decrypts the specified data. Declaration byte[] Decrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The decrypted data. | Edit this page View Source Decrypt(byte[], PasswordDeriveBytes, byte[], int) Decrypts the specified data. Declaration byte[] Decrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The decrypted data. | Edit this page View Source Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) Encrypts the specified data. Declaration byte[] Encrypt(byte[] data, byte[] key, byte[] salt, HashingAlgorithms hashingAlgorithm, int passwordIterations, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. byte[] key The key. byte[] salt The salt. HashingAlgorithms hashingAlgorithm The hashing algorithm. int passwordIterations The password iterations. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The encrypted data. | Edit this page View Source Encrypt(byte[], PasswordDeriveBytes, byte[], int) Encrypts the specified data. Declaration byte[] Encrypt(byte[] data, PasswordDeriveBytes key, byte[] initialVector, int keySize) Parameters Type Name Description byte[] data The data. PasswordDeriveBytes key The key. byte[] initialVector The initial vector. 16 ASCII characters long. int keySize Size of the key. Can be 64 (DES only), 128 (AES), 192 (AES and Triple DES), or 256 (AES) Returns Type Description byte[] The encrypted data."
  },
  "api/HashBrowns.Symmetric.Interfaces.html": {
    "href": "api/HashBrowns.Symmetric.Interfaces.html",
    "title": "Namespace HashBrowns.Symmetric.Interfaces | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric.Interfaces Interfaces ISymmetric Symmetric interface"
  },
  "api/HashBrowns.Symmetric.RC2.html": {
    "href": "api/HashBrowns.Symmetric.RC2.html",
    "title": "Class RC2 | HashBrowns API Reference",
    "keywords": "Class RC2 RC2 Inheritance object SymmetricBaseClass RC2 Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Symmetric Assembly: HashBrowns.dll Syntax public class RC2 : SymmetricBaseClass, ISymmetric Properties | Edit this page View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides SymmetricBaseClass.Name See Also SymmetricBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the algorithm. Declaration protected override SymmetricAlgorithm GetAlgorithm() Returns Type Description SymmetricAlgorithm The algorithm to use. Overrides SymmetricBaseClass.GetAlgorithm() See Also SymmetricBaseClass Implements ISymmetric See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.Rijndael.html": {
    "href": "api/HashBrowns.Symmetric.Rijndael.html",
    "title": "Class Rijndael | HashBrowns API Reference",
    "keywords": "Class Rijndael Rijndael Inheritance object SymmetricBaseClass Rijndael Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Symmetric Assembly: HashBrowns.dll Syntax public class Rijndael : SymmetricBaseClass, ISymmetric Properties | Edit this page View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides SymmetricBaseClass.Name See Also ISymmetric Methods | Edit this page View Source GetAlgorithm() Gets the algorithm. Declaration protected override SymmetricAlgorithm GetAlgorithm() Returns Type Description SymmetricAlgorithm The algorithm to use. Overrides SymmetricBaseClass.GetAlgorithm() See Also ISymmetric Implements ISymmetric See Also ISymmetric"
  },
  "api/HashBrowns.Symmetric.TripleDES.html": {
    "href": "api/HashBrowns.Symmetric.TripleDES.html",
    "title": "Class TripleDES | HashBrowns API Reference",
    "keywords": "Class TripleDES TripleDES Inheritance object SymmetricBaseClass TripleDES Implements ISymmetric Inherited Members SymmetricBaseClass.CreateInitialVector() SymmetricBaseClass.CreateKey() SymmetricBaseClass.Decrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Decrypt(byte[], PasswordDeriveBytes, byte[], int) SymmetricBaseClass.Encrypt(byte[], byte[], byte[], HashingAlgorithms, int, byte[], int) SymmetricBaseClass.Encrypt(byte[], PasswordDeriveBytes, byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: HashBrowns.Symmetric Assembly: HashBrowns.dll Syntax public class TripleDES : SymmetricBaseClass, ISymmetric Properties | Edit this page View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides SymmetricBaseClass.Name See Also SymmetricBaseClass Methods | Edit this page View Source GetAlgorithm() Gets the algorithm. Declaration protected override SymmetricAlgorithm GetAlgorithm() Returns Type Description SymmetricAlgorithm The algorithm to use. Overrides SymmetricBaseClass.GetAlgorithm() See Also SymmetricBaseClass Implements ISymmetric See Also SymmetricBaseClass"
  },
  "api/HashBrowns.Symmetric.html": {
    "href": "api/HashBrowns.Symmetric.html",
    "title": "Namespace HashBrowns.Symmetric | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns.Symmetric Classes Aes AES algorithm DES DES RC2 RC2 Rijndael Rijndael TripleDES TripleDES"
  },
  "api/HashBrowns.html": {
    "href": "api/HashBrowns.html",
    "title": "Namespace HashBrowns | HashBrowns API Reference",
    "keywords": "Namespace HashBrowns Classes CryptoManager Crypto manager ExtensionMethods Extension methods."
  },
  "api/Microsoft.Extensions.DependencyInjection.HashRegistration.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.HashRegistration.html",
    "title": "Class HashRegistration | HashBrowns API Reference",
    "keywords": "Class HashRegistration Registration extension methods Inheritance object HashRegistration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: HashBrowns.dll Syntax public static class HashRegistration Methods | Edit this page View Source RegisterHashBrowns(ICanisterConfiguration?) Registers the library with the bootstrapper. Declaration public static ICanisterConfiguration? RegisterHashBrowns(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | HashBrowns API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes HashRegistration Registration extension methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | HashBrowns API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | HashBrowns API Reference",
    "keywords": "Code using BigBook; using HashBrowns.Hashing.Enums; using HashBrowns.Symmetric.Enums; using Microsoft.Extensions.DependencyInjection; using System.Text; namespace HashBrowns.Example { /// <summary> /// This is just an example of how to use HashBrowns to hash and encrypt strings. /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Setup the DI var Services = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Hash the string using SHA256 Console.WriteLine(\"Let's hash some strings!\".Hash(HashingAlgorithms.SHA256).ToString(Encoding.UTF8)); // Hash the string using HMACSHA512 Console.WriteLine(\"Let's hash some strings!\".Hash(HashingAlgorithms.HMACSHA512).ToString(Encoding.UTF8)); // Encrypt the string using a password and salt var EncryptedString = \"Let's encrypt some strings!\".Encrypt(\"password\".ToByteArray(), \"salt\".ToByteArray(), HashingAlgorithms.SHA256, 5, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }, 256, SymmetricAlgorithms.AES); Console.WriteLine(EncryptedString.ToString(Encoding.UTF8)); // Decrypt the string using a password and salt var DecryptedString = EncryptedString.Decrypt(\"password\".ToByteArray(), \"salt\".ToByteArray(), HashingAlgorithms.SHA256, 5, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }, 256, SymmetricAlgorithms.AES); Console.WriteLine(DecryptedString.ToString(Encoding.UTF8)); } } } Output ??u??3/A6‼yH??S$e[???W? [0→?◄ ?U??v0???↕??:????♂??↑??c?☻!?RJ??4??♥ w?f>(?-◄?l⌂♀(?0{t3??t??? b???{????????$??539???6v∟↕N# Let's encrypt some strings!"
  },
  "index.html": {
    "href": "index.html",
    "title": "HashBrowns | HashBrowns API Reference",
    "keywords": "HashBrowns HashBrowns is a library to help simplify encryption within .Net. Basic Usage To use the library you first need to set up things on the ServiceCollection. Thankfully this only takes one call to do: serviceCollection.AddCanisterModules(); This is required prior to using the CryptoManager or extension methods class for the first time. Once Canister is set up, you can use the CryptoManager class: var Instance = Canister.Builder.Bootstrapper.Resolve<CryptoManager>().Encrypt(...); However instead of having the IoC container create the class, you can also use the extension methods found in the HashBrowns namespace: var EncryptedData = \"My string that I want to encrypt\".Encrypt(Key, Salt, HashingAlgorithm, NumberIterations, InitialVector, KeySize, EncryptionAlgorithm); Similarly you can decrypt: var DecryptedData = EncryptedData.Decrypt(Key, Salt, HashingAlgorithm, NumberIterations, InitialVector, KeySize, EncryptionAlgorithm); Also hashing is available: var MyHashedValue = \"Example data\".Hash(HashingAlgorithm); Installation The library is available via Nuget with the package name \"HashBrowns\". To install it run the following command in the Package Manager Console: Install-Package HashBrowns"
  }
}